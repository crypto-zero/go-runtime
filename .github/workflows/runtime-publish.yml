name: golang latest version runtime

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  IMAGE_REGISTRY: ghcr.io
  PROJECT_REGISTRY: ${{ github.repository }}


jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check version and image
        id: check
        run: |
          LATEST_GO_VERSION=$(curl -s 'https://go.dev/VERSION?m=text' | head -n 1 | cut -c 3-)
          echo "Latest go version is $LATEST_GO_VERSION"
          
          IMAGE_TAG="${IMAGE_REGISTRY}/${PROJECT_REGISTRY}:v${LATEST_GO_VERSION}"
          if docker manifest inspect $IMAGE_TAG >/dev/null 2>&1; then
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=$LATEST_GO_VERSION" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.check.outputs.version }}
          tags: ${{ env.IMAGE_REGISTRY }}/${{ env.PROJECT_REGISTRY }}:v${{ needs.check.outputs.version }}